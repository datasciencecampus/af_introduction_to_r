---
title: "Chapter 1 - Getting Started with R"
format:
  html:
    highlight: null
    theme: default
    toc: true
    toc-title: Contents
    toc-location: right
    toc-depth: 3
    number-sections: true 
    link-external-newwindow: true
    embed-resources: true
---

![](../Images/AF_DSC_banner.png){fig-alt="Data Science Campus and Analysis Function logos."}

# Learning Objectives

* Be familiar with R Studio.
* Explore the RStudio environment, layout, and customization.
* Understand the Key Benefits of using R.
* How to run code in R.
* Know where to get help.
* Discover R's data types.
* Be able to create Variables.

 
# What is R?
 
An open source programming language and environment for statistical computing and graphics.

It was initially written by **Ross Ihaka and Robert Gentleman** at the Department of Statistics of the University of Auckland in New Zealand.

It provides a wide variety of statistical techniques out of the box, leading to popularity among Analysts, Statisticians and Data Scientists.

Since it was created by statisticians (instead of computer scientists), R has some quirky aspects to it that take some time to get used to. 


## Benefits of Using R?

R is the 6th most popular programming language in the [Popularity of Programming Languages Index (PYPL)](https://pypl.github.io/PYPL.html) as of January 2024.

There are several reasons for this trend:

* Free and open source, people can modify and share because its design is publicly accessible.

* Cross Platform, it can be used across a range of operating systems i.e Windows, Linux, OS.

* Great support from a diverse and welcoming community. e.g. #rstats twitter community, numerous [R Meet Ups](https://www.meetup.com/topics/r-programming-language).
They have written outstanding open access material that you can use to learn R.

* There are lots of [packages available](https://cran.r-project.org/web/packages/available_packages_by_name.html) which contain implementations of processes and ready-made code not available out of the box.

* It has extensive and powerful graphics abilities. e.g [The BBC use R to produce their graphics](https://medium.com/bbc-visual-and-data-journalism/how-the-bbc-visual-and-data-journalism-team-works-with-graphics-in-r-ed0b35693535)

* Powerful tool for communicating results, including:
  * [RMarkdown](https://rmarkdown.rstudio.com/) makes it easy to turn your files into PDF'S, Power point presentations and   
  * [Shiny](https://shiny.rstudio.com/) allows you to make beautiful interactive apps and dashboards.


# R Studio

R is a programming language that runs computations, while R Studio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools.

You do not have to use R Studio to access R, and many people don’t!
Other IDEs that work with R include: 

* [Jupyter notebook](https://jupyter.org/) 
* [VisualStudio](https://visualstudio.microsoft.com/services/visual-studio-online/)

R Studio is broken down into four panels for our convenience. Each panel will help you do things in your R session.


When we open R Studio for the first time, we see this:


![](../Images/studio2.PNG){fig-alt="R Studio interface with the Code Editor, Environment, Console and Files panes."}

If you don't see the Code Editor pane, go to the tool bar and click **View -> Panes -> Show All Panes**.

You can also make panes bigger or smaller by hovering between two panes and then clicking and dragging.


## Global Settings Changes

Upon first opening R Studio, we have the most basic form of the tool that has some of the most useful workflow features off by default. Let's adjust these settings. 

Firstly, navigate to "Tools" and "Global Options", which is where this tweaking takes place.

![](../Images/global_options.png){fig-alt="Global options menu with general, code, appearance and more as options."}

You see that R Studio has a massive amount of customisation and we will only scratch the surface here. 

* First, remain on the "General" menu and:
    * Under **Workspace**, untick "Restore .RDAta into workspace at startup" and change the drop down below it to "Never". This prevents R from saving a snapshot of our workspace (variables, functions etc) in a file called **.RData** that is reopened everytime you open R again. 
    * Under **History**, untick "Always save history (even when not saving .Rdata)" to prevent the creation of a **.RHistory** file that logs code executed throughout your R session.
    
The reason we don't want to use these is that they are legacy ways of saving R code, and are not as effective or useful as more modern ways of saving our work, controlling coding logs with Git and so on. 

* Secondly, navigate to the "Code" menu and "Editing" sub-menu:
    * Provided you have R Version 4.1+ (which is the required version for these materials) tick "Use native pipe operator |>". We will investigate this fantastic tool in Chapter 4.
    * Tick "Soft-wrap R source files", which prevents code continuation past the width of the editor pane, so we won't need to horizontally scroll. 

* Thirdly, change to the "Display" sub-menu, still within the "Code" menu:
    * Tick "Allow scroll past end of document" if you would like to be able to scroll past the final lines of your script (optional).
    * Tick "Highlight R function calls", as this is incredibly useful for distinguishing different R objects.
    * Tick "Use rainbow parentheses" as this allows you to distinguish between different layers of brackets, which helps with syntax errors (missing brackets, incorrect code).
    
* Finally, navigate to the "Appearance" menu:
    * Change the font size to whatever is most comfortable for you, we recommend 14.
    * Change the help font size to whatever is most comfortable for you, we recommend 12.
    * Choose a theme that suits your preferences, we often use dark mode themes such as "Vibrant Ink" which has excellent code highlighting. 

Now that we have our R Studio set up, let's investigate each of the 4 main panes that we use for a diverse workflow. 


## The Console Pane

We are first going to learn about how to interact with the console, which is the bottom left pane.

This is where you can type code that executes immediately. This is also known as the **command line**.

This is where you will see R output. You can also type in and run code from here if you don’t want to save it.

We’ll spend a little time practising running code in the Console by exploring some basic properties of coding in R.

To run code in the Console, you type your code next to the command prompt > and hit "Enter".


### Exercise
::: {.panel-tabset}
Let's practice some mathematics in the console. 

### **Exercise**{-}

1. Try and type the expressions below and run them in the console, one at a time.  

```{r, eval=FALSE}

2 + 4

23 - 6; 36 + 5

1 + 3 +

```


### **Show Answer**{-}

```{r}

2 + 4

```

We didn't just get 6, we also got [1]. This is R's way of printing to the screen; it's telling us the position we're at.

Generally, it’s a good idea to put separate commands on separate lines, but you can put multiple commands on the same line, as long as you separate them by a semicolon.

```{r}

23 - 6; 36 + 5

```

Note that if a **"+"** appears instead of the command prompt **">"**, this means that the statement you submitted was incomplete. 

```{r, eval=FALSE}

1 + 3 +

```


We can either complete the expression or press the escape key to reset.

:::

The R Studio Console automatically maintains a ‘history’ so that you can retrieve previous commands.

On a blank line in the Console, press the up arrow key and see what happens.

The issue with coding in the console is that we can't save it and it is not easy to edit, which brings us to the code editor.


## The Code Editor Pane

This is the top left pane, where you will do the majority of your coding.

### R Scripts

A **script** is just a text file which we write our code in, generally we will use them to write code that is longer than just a few lines.

Lets create a script file which we will use to write and save our code during the course.

To create a new script:

**Click on File -> New file -> R Script** 

>**Alternatively you can press the short cut keys Ctrl+Shift+N**.

Scripts execute sequentially from top to bottom.

R Studio has the advantage of:

* Providing syntax highlighting (colouring code elements)

* Assisted code completion

* Smart indentation

We will see the benefits of these as you type your code throughout the course.

Take a moment to save your script in a location that makes sense to you. We would recommend saving it in the same place you have stored the Introduction to R course materials, the "Course Content" file for example. 

Take care in naming the script, as we will see later, naming conventions recommend underscores in place of spaces, and all lowercase names, for easier import, reference and access later on. For example "chapter_1".

>**Let's practice writing and running code in a fresh script.**

There are three main ways to run code in an .R script:

* Highlight the line(s) of code you’d like to run and press "Ctrl + Enter".

* Highlight the line(s) of code you’d like to run and click the **Run button** in the R script pane.

* To run **every line** of code in your file you can press "Ctrl + Shift + Enter".

We recommend using keyboard shortcuts as they diversify and speed up your workflow, without relying too heavily on the mouse. 

> **Example**

Type the following in your script and run the code:

(i) Run line by line with Ctrl + Enter.

(ii) Run every line with Ctrl + Shift + Enter.

```{r}

"I am learning R"

2 + 4

23 - 6; 36 + 5

```

### Commenting Code

Its best practice to leave comments in your code to describe what your code is actually doing as others may need to use your code in the future. It can also help when you pick up code you haven't worked on for a while.

We do this by using the hash key "#".

The **hash (#)** tells R not to run any of the text on that line to the right of the symbol. This is the standard way of commenting R code; it is good practice to comment concisely so that you can understand later what you did and why you did it. 

It is easy to over-comment, we recommend doing this when learning for the first code and when code is incomplete, but when sharing and collaborating on code, we should keep it concise, informative, but not verbose. 

Ideally, your code should follow best practice principles, and be understandable without any additional comments. 

>**Example**

Lets write a comment in our script. 

Type the hash "#" and write yourself a note at the top of your script.

```{r}

# This is my first R script

```

Comments will be used throughout these course materials to highlight new concepts. You may prefer to explain things in a more concise or more verbose way for your learning purposes. 

>**TIP - Comments can also be used to prevent R from running code that you don't want to delete by typing a hash at the beginning of the line of code.**

If you think you’ll be writing more than one line of code, you can do a hash sign followed by a single quotation mark (#'). This creates a multi-line comment that inputs the symbol again (to start commentary) each time you hit “Enter.” You can delete the #' on a new line where you want to write code for R to run. This method is useful when you’re writing a description of what you’re doing in R.

>**Alternatively you can press the short cut keys Ctrl+Shift+C to comment out lines of code you have highlighted.**

We recommend saving your script as progress through sub-sections, take notes and run code. Doing this often ensures you won't lose progress should a crash occur. 

To save the script:

* Click on "File" and then select "Save as", where you will need to navigate to the 

>**Alternatively you can press the short cut keys Ctrl + S**.


## The Environment Pane

The top right pane is very useful as it shows you what objects (such as data frames, variables and functions) you have in your environment (workspace).

Also in the Environment is the **History** tab, which keeps a record of all previous commands. This can be useful to retrieve code which maybe you forgot to save:

* You can click the "To Console" button which moves code to the console for quick execution
* You can click the "To Source" button which will move the code to your script.

In newer versions of R Studio there is also the **Tutorial** tab, which provides links to install the built in tutorial for this tool, written by the community. 


## Files and Packages Pane

The bottom right pane has a number of different tabs:

* The **Files** tab has a navigable file manager, just like the file explorer or finder app on your operating system. 

* The **Plots** tab is where graphics you create will appear. 

* The **Packages** tab shows you the packages that are installed and those that can be installed, more on this in Chapter 3. 

* The **Help** tab allows you to search the R documentation for help and is where the help appears when you ask for it from the Console. We will do an example of this soon.

* You may also see a **Viewer** tab, which comes with installed packages that allow you to export scripts to different formats such as HTML and PDF. It will show you the finished product. 

## Cheat Sheets

For more information about R Studio, you can find the **R Studio** Cheat Sheet under the **Help -> Cheat sheet**. There are cheat sheets for almost every popular package and tool within this framework, we recommend bookmarking them as you learn.


# Data Types.

To get the best out of R, you will need to have a strong understanding of the basic data types and structures and how to operate on them.

R can store and manipulate different pieces of information, called data, and these data can be of several different types.

Different processes apply to different types of data.

Different data types have different properties; if you try to run:
>**1 + "two"**

you will get an error due to a mismatch of types, since you are adding a number to a word, which makes no sense.

Let's start with numeric data.

## Numeric Data

Let's start by working with numbers.

### Numeric Operators

You will most likely want to perform mathematical operations with numbers. Here is a list of some operators you may want to use.

|Operator   | Description     |
|:---------:|:---------------:|
|     +     | Addition        |
|     -     | Subtraction     |
|     *     | Multiplication  |
|     /     | Division        |
|       ^   | Exponents/Powers       |
|    %%     | [Modulo Division](https://en.wikipedia.org/wiki/Modulo_operation)|
|    %/%    | [Floor Division](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions)|


Let's have a play with some of these operators:

>**Example**

Type and run the code below.

```{r}

# Numeric operations

9 + 27.73

(59 + 73 + 2) / 3

```

It’s also useful to note that R will follow BODMAS for the order of mathematical operations.

```{r}

# R follows Order of Operators. 

10 + 11 * 12 / 3 - 5^2

```

Note that "5^2" means 5 raised to the power of 2 (squared) or 5 * 5. 

### Introducing functions

There are also some built-in mathematical functions for square rooting, rounding etc. 

> **Functions are commands that take an input, do something to it, and produce an output. These are essential to R programming and will come up time and time again.**

Functions in R are written as:

* A word (the name given to the function by its creator), which is **fixed**.
* Parentheses, which is where we type the input(s). 

For example:

* The square root function is written as **sqrt()**
* The rounding function is written as **round()**

Let’s see these in action.

```{r}
# Calculating the square root of 9 using functions.

sqrt(9)


# Rounding a value using functions. 

round(3.6357)

```

The inputs we give to the function have labels/names, known as the **argument**, which are fixed by the creator of the function and what we type to follow it is the **value** we give as an input:

* **func(argument = value)**

Notice that above we didn't give the argument, we just gave the value. This is acceptable in this case as sqrt() and round() are quite simple functions, the former only taking a single input.

Functions such as round() can take more than one argument, as they are more complex processes that we can tweak to our liking. If we want to round, we would likely want to specify the number of decimal places to round to for example.

When we start using multiple arguments, we should be meticulous in using arguments for the values/inputs we provide to functions. This not only makes it clear to us and others what we are doing, it also avoids an error we will see later in the course. 

We separate arguments within functions using commas, as follows:

* **func(argument_1 = value_1, argument_2 = value_2,...)**

> Let's see an example of using multiple arguments with the round() function.

```{r}
# Using the digits argument within round()

round(3.6357, digits = 2)
```

Notice that we used the argument "digits" (remember, these are fixed by the creator so we **must** use the correct name) and set it to 2. This means we have asked the function to round 3.6357 to 2 decimal places. 

>**Notice that even without the digits argument, the round() function works. This is because digits (like many arguments) is optional, and has a value by default, which is the value of 0 - rounding to the nearest whole number.**

We can investigate what specific functions do by navigating to the "Help" tab in the bottom right and searching it by name.

![](../Images/round_docstring.png){fig-alt="The document string of the rounding functions in R."}

We see:

* The description of the function of family of functions (group of functions that perform similar actions).

* Examples of its use under "Usage".

* Descriptions of its arguments and what they expect as their values under "Arguments".

and some other niche notes for more advanced R users. 

There are many more built-in functions which you will discover with more exposure to R, but for now we will move onto the different types of numbers we might work with. 

### Numeric Data Types

Not all numeric data is categorised the same. There are two key datatypes for them:

* Double (dbl) 
* Integers (int)

A **Double** is the general numeric datatype and by default R will treat all numbers you use as double unless you give it an explicit reason to think otherwise. So therefore, any number with or without a decimal place will be treated as double. This is quite different from other languages such as Python.

An **Integer** is a positive or negative whole number with no decimal place, such as -2, -1, 0, 1, 2. In R these aren't as widely used, but should it be required, we specify them using a capital "L" at the end of the number for R to recognize them as such. 

>**We can see the respective type of any data by using the "typeof()" function.**

```{r}
# Output datatypes of specific numeric inputs

typeof(10)

typeof(10L)
```


## Textual Data

In R, we refer to text as 'character' (chr) strings. Strings are sequences of character data, usually used to store qualitative data.

Strings are contained within either 'single' or "double" quotation marks.

All characters between the opening and the closing quote are part of the string.

```{r}
# Example of a character string

"Hello World"

```

The choice between single and double quotes is up to the user, as long as you start and end with the same symbol. Unlike other languages, there is no difference in behaviour.

What we must be careful of however, is utilising apostrophies or quotes within a sentence. If we must do this, we use one quotation mark to open and close the string and the **other** to type the quote. 

For example - Don't run the following code:

```{r, eval=FALSE}
# Incorrect character string

"You should be very proud of when you typed "Hello World" and ran that code on your own!"

```

Notice that the syntax highlighting has told us that something is wrong, as the "Hello World" is outside of the string, since we used too many double quotes. However, if we switch to single quotes, this will work fine. 

```{r}
# Correct versions of the character string

"You should be very proud of when you typed 'Hello World' and ran that code on your own!"

'You should be very proud of when you typed "Hello World" and ran that code on your own!'
```

Notice that the outputs here are slightly different. This is because when inside a string, R needs to be sure that the character (such as a quote mark) is being used as raw text, as opposed to it's other function as a way to create strings. 

This manifests itself as a **backslash \** which is known as an escape character. It basically tells R to interpret the character that directly follows it as text.

>**TIP -  If you forget to put quotes around something, you can highlight and press the quote key and it will add quotes to both sides.**


## Logical Data

In R these are written as "TRUE" or "FALSE" and cannot take any other form. 

> **They are special R data types - not characters! So they don't need '' or "" around them.**

They can be abbreviated to "T" and "F", but this is not good practice since it is not explicitly typing them out. 

### Comparisons to produce logicals

These seem arbitrary at first, but are **essential** for comparison purposes, and are created under the hood many times when performing data manipulations such as filtering. 

The logical operators that can output them as an answer to a question are as follows:

Logical Operator| Description
:--------------:|:------------:
        <       | Less Than
       <=       | Less Than or Equal To
       \>       | Greater Than
       >=       | Greater Than or Equal To
       ==       | Equal To
       !=       | Not Equal To
      %in%      | Membership
       \|       | Or
        &       | And


There are more, but they come into play in Chapter 4.

>**Let's see some examples:**

Is 4 greater than 5?

```{r}
# Greater than comparison

4 > 5
```

Is 25 equivalent to 5 squared?

```{r}
# Check equivalence comparison

25 == 5^2
```

Is 1 not equivalent to 2?

```{r}
# Check non-equivalence comparison

1 != 2
```

### Numeric representation of logicals

Since logicals are binary operators (they are one or the other, nothing else), they also have binary numeric values behind them:

* TRUE is 1 
* FALSE is 0.

Therefore, we can convert them to numbers and even perform arithmetic operations on them!

```{r}
# Prove that TRUE has a numeric representation

TRUE + TRUE
```

And use any other operator too!

```{r}
# Prove that FALSE has a numeric representation
FALSE * 2.5
```

These are quite a complex datatype and there is much more beyond the scope of the course in this topic. 

>**Please note that there are other data types such as factors, dates and times that are beyond the scope of the course, but will come up as you progress in your R journey.**


## Exercise
::: {.panel-tabset}

### **Exercise**{-}

1.What is the data type of the following?

```{r, eval=FALSE}

# Guess the datatypes

"10"

10L

10

TRUE

"ten"

"TRUE"

FALSE

"FALSE"

```

### **Show Answer** {-}

The "typeof()" output denotes the (R internal) type or storage mode of any object.

```{r}

# Find out the datatypes

typeof("10")

typeof(10L)

typeof(10)

typeof(TRUE)

typeof("ten")

typeof("TRUE")

typeof(FALSE)

typeof("FALSE")


```

Were there any that surprised you?

:::

## Data Type Conversion

Now that you know some of R's data types we will look at how to convert between data types.

R doesn't require you to set the data type when you create it, instead it figures out what the best data type is for the object you are creating - numeric, character, logical, etc. 

Given that R is a dynamically typed language, sometimes the data type you want to work with, and the one R infers are not the same.

Sometimes you want to ensure that a particular object is actually a certain type, rather than leaving it up to R. This is done using data type conversion. R has a range of in-built functions that enable you to convert data from one type to another.

In order to convert the data, you need to use the **as.** family of functions. When writing the command, you specify the data type you are converting to. The commands are as follows:

* "as.numeric()" to convert to Double.

* "as.character()" to convert to Characters.

* "as.logical()" to convert to Logical.

Let's see some examples.

```{r}
# Examples of type conversion

as.integer(4.996453)

as.numeric("2")

as.character(245)
```

We see that:

* as.integer() did no rounding (we didn't ask it to!) it just removed everything after the decimal place, or took the integer component only.

* as.numeric() converted the string "2" to a double.

* as.charater() placed quotation marks around 245 to make it a character string.

You can check the resultant types of these conversions by wrapping them up in a typeof() function. This shows that we can chain functions together. Brackets can get unruly when doing this, so the rainbow colours will help distinguish which bracket belongs to which function.

```{r}
# Check the type of converted data

typeof(as.integer(4.996453)) 
```


# Variable Assignment

R does not provide direct access to the computer’s memory but rather provides a number of specialized data structures we will refer to as objects. 

Everything in R is an object, We can assign these objects names which we "call" to use them or output their value, this is called a variable.

Variables are an integral part of any programming language. Variables allow us to store and label data under a specific name. It is like a place holder, used to store information. Think of it as a container, the main purpose is to label and store the data in memory.


We can assign a value to a variable using the **<-** operator, which has the keyboard shortcut 
> alt - (alt + dash/minus)

for example:

```{r}
# To assign a variable

weight_kg <- 60
```

We see that the variable/label/name goes on the left, followed by the assignment operator, then lastly the value that name is assigned to.

When reading left to right, the code says "weight_kg gets the value 60".

Once an object has been created it will appear in your Environment window which helps you keep track of what objects you have in your current workspace - the top right pane.


After the assignment, to access or use the value we simply call it by name as said before, literally type the name. 

```{r}
# To display the variable

weight_kg
```

If you wanted to display that a bit better you could use the "cat()" function (concatenate) which can take data and variables as inputs, grouping them together in a sentence/sequence of outputs. 

```{r}
# Using the cat() function to display our result

cat('my weight is: ', weight_kg)
```

You could continue this with other variables created as well. Let's add our age!

```{r}
# Creating an age variable and improving the sentence

age_yrs <- 27

cat("My weight is", weight_kg, "kg, and I am", age_yrs, "years old.")
```

The possibilities really are endless. 


We can use our variables in mathematical operations as well:

```{r}
# Add 4 to our weight

weight_kg + 4
```

Or even creating new variables using existing ones! Like this conversion from kg to lbs.

```{r}
# Creating a new variable, converting the existing one

weight_lb <- weight_kg * 2.2

# To display the variable

weight_lb
```

If we ever want to reassign a variable we would simply use the operator above again. 

For example. let's assign our height as 5.

```{r}
# Create height variable

height <- 5


# Display height

height

```

Using the same variable name will overwrite the previously assigned variable, even if we assign it to the same value (of course the value wouldn't change).

Let's overwrite height to a different value.

```{r}
# Assign and overwrite height

height <- 7

# Display new height

height
```

We can also assign a value to name (or label) using the **=** operator, but this is considered bad practice in R, since it is used inside of functions for arguments and values. 

We can also use a reversed arrow notation **->**, which makes it so the value is on the left and the variable is on the right. 

Here are a few examples of them in action:

```{r}
# Use reverse arrow assignment

40 -> weight_kg

# Output variable

weight_kg
```

Since we often read left to right, the original method we showed is the practice we will continue using throughout, but there are niche cases where this reverse arrow is useful for readability. 


## Removing Variables

To remove a variable, we would utilise the "remove()" function of R, or the alias (nickname) "rm()". 

For example:

```{r}
# Removing assigned variables using the remove function

remove(height)

# rm(height) will also work
```


## Variable Names

There is much to say when it comes to naming conventions:

* R is case sensitive, so whatever we name our variables has be typed **exactly** to display them.
* Names must start with a letter.  
* Names cannot contain spaces, this is an error in syntax.
* Names cannot use reserved words such as "TRUE" or "FALSE" or the name of a function like "sqrt()", which already mean something in R. 
* Ideally, names should be descriptive, so that when someone else is reading your code they don't have to guess what value that variable has.

Notice above where we wrote "weight_kg" which cannot be misconstrued, it is a weight value in kg. 

We heartily recommend snake_case where:

* Names are entirely lower case.
* Names separate words with underscores **_**.

There is also camel case:

* Names start with a capital letter and each word is separated by them, such as **WeightKg**

There is also period case:

* Names are separated with full stops, such as **weight.kg**.

We tend to discourage the use of period case though. 

We have more detailed examples and information on good variables names in our other course: [Best Practice in Programming](https://learninghub.ons.gov.uk/course/view.php?id=497)


## Exercise
::: {.panel-tabset}

### **Exercise**{-}

1. Why does this code not work?

```{r,eval=FALSE}
# Assign my_variable

my_variable <- 10


# Not working

my_varIable
```


2. Create two variables:

* Time at a value of 30 seconds.
* Distance at a value of 10 metres.

Then:

* Double the time variable and overwrite it.
* Add 5 to the distance variable and overwrite it.

3. Using the variables you created above, compute the speed using the formula:

* **speed = distance / time**

4. Use the remove() and rm() functions to remove the time and distance variables. 


### **Show Answer**{-}

1. You would have got the error below;

>Error: object 'my_varIable' not found

Variables, as is R in general, are case sensitive, so when we called the variable with a capital I, this was a name that is independent of the original variable name, so R does not recognise it, as there is nothing called "my_varIable". 

Error messages of the form "object '...' not found" mean exactly what they say. R cannot find an object with that name. 


2. 

```{r}

# Create time

time_secs <- 30

# Create distance

distance_metres <- 10

# Overwrite time

time_secs <- 30 * 2

# Overwrite distance

distance_metres <- distance_metres + 5

```

3.

```{r}

# Create speed using the formula

speed <- distance_metres / time_secs

# Display speed

speed

```

4. 

```{r}
# Remove time

remove(time_secs)

rm(distance_metres)

```

:::

# Help

Very few (if any) people in the world know everything there is to know about R. This means that we all need to look things up and there is an ocean of resources available. 


## Cheat Sheets

You can access these by clicking on **Help** tab in R Studio and then **RStudio Cheat Sheets**. There are so many of these and can provide an excellent reference point for many repeated or common tasks.

![](../Images/data-transformation-cheat-sheet.png){fig-alt="The dplyr cheat sheet for data manipulation."}


## R Documentation
::: {.panel-tabset}

### **Example**{-}

Every time you use a function for a first time or reuse a function after some time , it is recommended that you look through the help documentation of that function. We saw this earlier with the round() function.

You can also use code to access help documentation should you wish:

* You can precede the function name with a question mark **?**.

* You can use the **help()** function built into R and the name of the function inside it. 

Note that you do not need to use the brackets **()**, just the function name. 

Let's see an example with the mean() function, that computes the mean of a collection of values.

```{r}
# To access the R help documentation

?mean 

#or 

help(mean)

```

These help files are very useful, but also tend to contain a lot of technical jargon. 

In learning to use R, you will begin to understand this jargon, making it much easier for you to learn more in the future.

Of course, you can use Google to search for other articles, documentation and so on. Becoming adept at searching for answers to your queries and using coding elements is actually something we whole-heartedly recommend.


### **Parts of a Help Page**{-}

Each help page is divided into sections. 

Which sections appear can vary from help page to help page, but you can usually expect to find these useful headings:

**Description** - A short summary of what the function does.

**Usage** - An example of how you would type the function. Each argument of the function will appear in the order R expects you to supply it (if you don’t use argument names).

**Arguments** - A list of each argument the function takes, what type of information R expects you to supply for the argument, and what the function will do with the information. This is a section we often spend quite a bit of time in, figuring out what arguments do and the options available for each argument.

**Details** - A more in-depth description of the function and how it operates. The details section also gives the function author a chance to alert you to anything you might want to know when using the function.

**Value** - A description of what the function returns when you run it.

**See Also** - A short list of related R functions.

**Examples** - Example code that uses the function and is guaranteed to work. The examples section of a help page usually demonstrates a couple different ways to use a function. This helps give you an idea of what the function is capable of.

:::

## Stack Overflow

[Stack Overflow](https://stackoverflow.com/questions/tagged/r) is a great site to check if anyone has has a similar problem to you, its has useful forums if you are looking for how to do something in R, if you are struggling with an error and so on.

You can search the R-tagged questions on the Stack Overflow site, of which there are over 501,000 as of January 2024. 

Note that to make the most use of the forum, you should provide the code written and the output generated so users in Stack Overflow can replicate the problem and advise you further. 

You should also detail what you have attempted and what you want to get out of the code written. 

## Cross Government Data Science Slack

[The Cross Goverment Data Science Slack](https://govdatascience.slack.com/) is a place to talk to other people working with Data across government.
It has about 3000 members and its mostly R and python based and people post training materials, blogs events etc.

## The Data Science Campus Faculty Team

If you have any issues with this course; or notice any errors, please contact the training team on the email:

>Data.Science.Campus.Faculty@ons.gov.uk

Please be aware that due to training commitments there may be a small wait before we respond to your query. We also expect that you have attempted to solve your query yourself before contacting us.

# Summary

We have covered a lot material in R and yet there is still so much more to cover in terms of functionality, as R has so much to offer. 

By no means are you expected to remember all the above, what is better is that you understand the problems you want to solve and then use the references or material provided (or you find yourself) to go about solving it. 

Next up we will look at data structures in R.

