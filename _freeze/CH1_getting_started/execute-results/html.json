{
  "hash": "2ef97ab80f5ab82604f96f23f11721ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 1 - Getting Started with R\"\nauthor: \"Government Analysis Function and ONS Data Science Campus\"\nengine: knitr\nexecute:\n  echo: true\n  eval: false\n  freeze: auto  # re-render only when source changes\n---\n\n\n\n\n> To switch between light and dark modes, use the toggle in the top left\n\n# Learning Objectives\n\n-   Be familiar with R Studio.\n-   Explore the RStudio environment, layout, and customization.\n-   Understand the Key Benefits of using R.\n-   How to run code in R.\n-   Know where to get help.\n-   Discover R's data types.\n-   Be able to create Variables.\n\n# What is R?\n\nAn open source programming language and environment for statistical computing and graphics.\n\nIt was initially written by **Ross Ihaka and Robert Gentleman** at the Department of Statistics of the University of Auckland in New Zealand.\n\nIt provides a wide variety of statistical techniques out of the box, leading to popularity among Analysts, Statisticians and Data Scientists.\n\nSince it was created by statisticians (instead of computer scientists), R has some quirky aspects to it that take some time to get used to.\n\n## What are the benefits of using R?\n\nR is the 6th most popular programming language in the [Popularity of Programming Languages Index (PYPL)](https://pypl.github.io/PYPL.html) as of January 2024.\n\nThere are several reasons for this trend:\n\n-   Free and open source, people can modify and share because its design is publicly accessible.\n\n-   Cross Platform, it can be used across a range of operating systems i.e Windows, Linux, OS.\n\n-   Great support from a diverse and welcoming community. e.g. #rstats twitter community, numerous [R Meet Ups](https://www.meetup.com/topics/r-programming-language). They have written outstanding open access material that you can use to learn R.\n\n-   There are lots of [packages available](https://cran.r-project.org/web/packages/available_packages_by_name.html) which contain implementations of processes and ready-made code not available out of the box.\n\n-   Powerful tool for communicating results, including:\n\n    -   [RMarkdown](https://rmarkdown.rstudio.com/) makes it easy to turn your files into PDF'S, Power point presentations\n    -   [Shiny](https://shiny.rstudio.com/) allows you to make beautiful interactive apps and dashboards.\n\n# R Studio\n\nR is a programming language that runs computations, while R Studio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools.\n\nYou do not have to use R Studio to code in R, however it was built specifically to get the best out of the language and is highly recommended. If you cannot get access to R Studio desktop edition, you could consider using Posit Cloud (the new name for R Studio Cloud).  Instructions for this are in a separate html guide.\n\nOther IDEs that work with R include:\n\n-   [Jupyter notebook](https://jupyter.org/)\n-   [VisualStudio](https://visualstudio.microsoft.com/services/visual-studio-online/)\n\n## Opening R Studio\n\nR Studio is broken down into four panels.\n\nWhen you open R Studio for the first time, you see this:\n\n![](Images/studio2.PNG){fig-alt=\"R Studio interface with the Code Editor, Environment, Console and Files panes.\"}\n\nIf you don't see the Code Editor pane, go to the tool bar and click **View -\\> Panes -\\> Show All Panes**.\n\nYou can also make panes bigger or smaller by hovering between two panes and then clicking and dragging.\n\n## Global Settings Changes\n\nUpon first opening R Studio, you have the most basic form of the tool that has some of the most useful workflow features off by default. Let's adjust these settings.\n\nFirstly, navigate to \"Tools\" and \"Global Options\", which is where this tweaking takes place.\n\n![](Images/global_options.png){fig-alt=\"Global options menu with general, code, appearance and more as options.\"}\n\nYou see that R Studio can be heavily customised. You will only scratch the surface here.\n\n-   First, remain on the \"General\" menu and:\n    -   Under **Workspace**, untick \"Restore .RData into workspace at startup\" and change the drop down below it to \"Never\".\n    -   Under **History**, untick \"Always save history (even when not saving .Rdata)\".\n\nThe reason you don't want to use these is that they are legacy ways of saving R code, and are not as effective or useful as more modern ways of saving your work, controlling coding logs with Git and so on.\n\n-   Secondly, navigate to the \"Code\" menu and \"Editing\" sub-menu:\n    -   Provided you have R Version 4.1+, tick \"Use native pipe operator \\|\\>\".\n    -   Tick \"Soft-wrap R source files\", which prevents code continuation past the width of the editor pane.\n-   Thirdly, change to the \"Display\" sub-menu, still within the \"Code\" menu:\n    -   Tick \"Allow scroll past end of document\" if you would like to be able to scroll past the final lines of your script.\n    -   Tick \"Highlight R function calls\", as this is incredibly useful for distinguishing different R objects.\n    -   Tick \"Use rainbow parentheses\" as this allows you to distinguish between different layers of brackets, which helps with syntax errors.\n-   Finally, navigate to the \"Appearance\" menu:\n    -   Change the font size to whatever is most comfortable for you, 14 works well.\n    -   Change the help font size to whatever is most comfortable for you, 12 is a good default.\n    -   Choose a theme that suits your preferences, many people prefer dark mode themes such as \"Vibrant Ink\" due to the code highlighting functionality.\n\nNow that you have R Studio set up, you will create an R Project to make management of your code simpler.\n\n## R Projects\n\nCreating an R Project enables your work to be bundled in a folder that is:\n\n-   Self-contained\n-   Portable\n\nAll the scripts, data files, figures, outputs and history can be stored in sub-folders.\n\nThe root folder of the R Project (which you choose when you create it) contains the **.Rproj** file and is the **working directory** each time you open it.\n\n### Creating an R Project\n\nTo create an R Project, select **File --\\> New Project** and you will be given some examples of where to store the .Rproj file, a.k.a where the working directory will be.\n\n![](Images/new_r_project.png){fig-alt=\"A project can be created in a new directory, existing directory or from GitHub.\"}\n\nYou can:\n\n-   Create a **New Directory** - Create a new folder/directory for the R Project to be placed in, all subfolders created within will be part of the project.\n\n-   Create a project in an **Existing Directory** - Creating an R Project in an existing folder/directory\n\n-   Import an existing project from a repository created on a Version Control platform, such as GitHub or Gitlab. This is beyond the scope of this course.\n\n### **Exercise** {.unnumbered}\n\nCreate an R project in an **existing directory**, selecting the **course_content** folder provided.\n\nIn your own work, saving it one level higher in the root folder is a better approach. For this course, you must save it where you will save your scripts so the filepaths function correctly.\n\n![](Images/rproj_folder.png){fig-alt=\"The root folder showing the .Rproj file alongside the othr folders.\"}\n\nAfter creating the R Project, it will open and set your working directory.\n\nWere you to share your folder with others, they can open the project file and everything will be set for them. This is a big step towards ensuring reproducibility.\n\n### Re-opening the project\n\nDue to the changes you made earlier to the global settings, R Studio will be fresh each time you open it.\n\nSo how do you get back to your project?\n\nThankfully, you have the project menu in the top right, which allows you to:\n\n-   Create a new project\n-   Open existing project(s)\n-   Close projects\n-   See recently open projects and jump straight to them\n\n![](Images/project_menu.png){fig-alt=\"The top right menu that allows you to interact with projects.\"}\n\nFrom here, assume you create and save your scripts in this project in order for filepaths in Chapter 3 onwards to function.\n\n> Let's return now to R Studio, and discuss each of its 4 panes in detail.\n\n## The Console Pane\n\nThe bottom left pane is the console, where you can type and execute code. This also contains a **terminal** or **command line** that can be used to interact with your computer.\n\nR output will appear in the console regardless of where you execute it from.\n\nTo run code in the Console, type next to the command prompt and hit \"Enter\".\n\n### Exercise\n\n::: panel-tabset\nLet's practice some mathematics in the console.\n\n### **Exercise** {.unnumbered}\n\n1.  Type the expressions below and run them in the console one at a time.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 4\n\n23 - 6; 36 + 5\n\n1 + 3 +\n```\n:::\n\n\n\n\n### **Show Answer** {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 4\n```\n:::\n\n\n\n\nNotice the \\[1\\]. This is how R tells you the position you're at in execution.\n\nAs a rule of thumb, write and execute separate commands on separate lines. Although it is messy and often unhelpful, you can put multiple commands on the same line by separating them by a semicolon.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n23 - 6; 36 + 5\n```\n:::\n\n\n\n\nNote that if a **\"+\"** appears instead of the command prompt **\"\\>\"**, this means that the statement you submitted was incomplete. The console is expecting further input.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 3 +\n```\n:::\n\n\n\n\nYou can either complete the expression or press the **escape** key to reset.\n:::\n\nThe R Studio Console automatically maintains a history so you can retrieve previous commands.\n\nOn a blank line in the Console, press the up arrow key and see what happens.\n\nThe issue with coding in the console is that you can't save it and it is not easy to edit, which brings you to the code editor.\n\n## The Code Editor Pane\n\nThis is the top left pane, where you will do the majority of your coding.  Often this is in the form of R scripts.  A **script** is usually a text file which you write your code in, generally code that is longer than a few lines. It is recommended that you create a few of these as you proceed through the course.\n\n### **Creating a new script**\n\n**Click on File -\\> New file -\\> R Script**\n\n::: {.callout-note}\nAlternatively you can press the short cut keys Ctrl+Shift+N.\n:::\n\nScripts execute sequentially from top to bottom, and give you the advantages of:\n\n-   Syntax highlighting, to identify code elements by colour\n-   Auto completion of code\n\nYou will see the benefits of these as you type your code throughout the course.\n\n### **Saving a new script**\n\nIn practice, you would save your scripts in a specific folder. Each sub-folder of the root project would containing one type of file (R scripts, images, notebooks etc).\n\nThis is known as a **tree** structure, where there is a root of the tree, and the sub-folders themselves are the **branches**.\n\nFor this course, save your scripts in the root directory (where the .Rproj files are), this will ensure all filepaths for later chapters function as expected.\n\nTo save the script click on \"File\", select \"Save as\" and choose a location.\n\n::: {.callout-note}\nAlternatively you can press the short cut keys Ctrl + S.\n:::\n\n### **Running code in an R Script**\n\nAfter typing some code in your R script, there are several ways to run it:\n\n-   Click the cursor to the end of the line of code and press **CTRL + ENTER**.\n\n-   To run every line of code in your file you can press **CTRL + SHIFT + ENTER**.\n\nYou can use keyboard shortcuts to diversify and speed up your workflow if appropriate.\n\n### **Example**\n\nType the following in your script and run the code:\n\n(i) Run line by line with Ctrl + Enter.\n\n(ii) Run every line with Ctrl + Shift + Enter.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"I am learning R\"\n\n2 + 4\n\n23 - 6; 36 + 5\n```\n:::\n\n\n\n\n### Commenting Code\n\nCommenting your code to describe functionality is an important skill to learn. It allows others to use your code in the future and can help you pick up code you haven't worked on for a while. As with most skills, start small and build up your experience with practice.\n\nYou can add comments using the hash key \"#\".\n\nThe **hash (#)** tells R not to run any of the text on that line to the right of the symbol. Keep your comments concise and to the point. Excessive comments can make code look cluttered and confusing.\n\n### **Example** {.unnumbered}\n\nLets write a comment in your script.\n\nType the hash \"#\" and write yourself a note at the top of your script.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This is my first R script\n```\n:::\n\n\n\n\nComments will be used throughout these course materials to highlight new concepts.\n\nAdd your own if helpful, or edit/remove any that don't help.\n\n::: {.callout-tip}\nComments can also be used to prevent R from running code that you don't want to delete by typing a hash at the beginning of the line of code.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Comment out a line of code\n\n# 2 + 2 \n```\n:::\n\n\n\n\n::: {.callout-note}\nAlternatively you highlight line(s) of code and press CTRL + SHIFT + C to comment them out.\n:::\n\n### **Multi-line Commentary** {.unnumbered}\n\nTo write more than one line of code, use a hash sign followed by a single quotation mark **#'**.\n\nThis creates a multi-line comment that inputs the symbol again each time you start a new line.\n\nYou can delete the **#'** on a new line where you want to write code for R to run.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' This is a multi-line comment\n#' you hope you like the look of R Studio so far!\n```\n:::\n\n\n\n\n## The Environment Pane\n\nThe top right pane is very useful as it shows you what you have saved in your workspace (environment), such as:\n\n-   Variables\n-   Functions\n-   Datasets\n\nAlso in the Environment is the **History** tab, which keeps a record of all previous commands.\n\nIn newer versions of R Studio there is the **Tutorial** tab, which provides links to install the built in tutorial for this tool.\n\n## Files and Packages Pane\n\nThe bottom right pane has a number of different tabs:\n\n-   The **Files** tab has a navigable file manager, just like the file explorer or finder app on your operating system.\n\n-   The **Plots** tab is where graphics you create will appear.\n\n-   The **Packages** tab shows you the packages that are installed and those that can be installed, more on this in Chapter 3.\n\n-   The **Help** tab allows you to search the R documentation for help and is where the help appears when you ask for it from the Console.\n\n-   You may also see a **Viewer** tab, which comes with installed packages that allow you to export scripts to different formats such as HTML and PDF. It will show you the finished product.\n\n## Cheat Sheets\n\nFor more information about R Studio, you can find the R Studio Cheat Sheet under the **Help -\\> Cheat sheet**.\n\nThere are cheat sheets for almost every popular package and tool within this framework, make sure to bookmark them as you go!\n\n# Data Types\n\nTo get the best out of R, you need to understand the basic data types and how to operate on them.\n\nDifferent data types have different properties; if you try to run:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + \"two\"\n```\n:::\n\n\n\n\nyou will get an error due to a mismatch of types, since you are adding a number to a word.\n\n## Numeric Data\n\nLet's start by working with numbers.\n\n### Numeric Data Types\n\nNot all numeric data is categorised the same. There are two key datatypes for them:\n\n-   Double (dbl)\n\n-   Integers (int)\n\n-   A **Double** is the general numeric datatype and by default R will treat all numbers you use as double unless you give it an explicit reason to think otherwise.\n\n    -   So any number with or without a decimal place will be treated as double. This is quite different from other languages such as Python.\n\n-   An **Integer** is a positive or negative whole number with no decimal place, such as -2, -1, 0, 1, 2.\n\n    -   In R these aren't as widely used, but should it be required, you specify them using a capital \"L\" at the end of the number for R to recognize them as such.\n\n### Numeric Operators\n\nYou will likely perform mathematical operations with numbers. Here is a list of some common operators:\n\n| Operator |                                 Description                                 |\n|:---------------------------:|:-----------------------------------------:|\n|    \\+    |                                  Addition                                   |\n|    \\-    |                                 Subtraction                                 |\n|    \\*    |                               Multiplication                                |\n|    /     |                                  Division                                   |\n|    \\^    |                              Exponents/Powers                               |\n|    %%    |      [Modulo Division](https://en.wikipedia.org/wiki/Modulo_operation)      |\n|   %/%    | [Floor Division](https://en.wikipedia.org/wiki/Floor_and_ceiling_functions) |\n\nLet's have a play. What do you think the code below does?\n\n### **Example**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Numeric operations\n\n9 + 27.73\n\n(59 + 73 + 2) / 3\n```\n:::\n\n\n\n\nR will follow BODMAS/BIDMAS for the order of mathematical operations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R follows Order of Operations. \n\n10 + 11 * 12 / 3 - 5^2\n```\n:::\n\n\n\n\n5\\^2 means 5 raised to the power of 2 (squared) or 5 \\* 5.\n\n## Textual Data\n\nIn R, you refer to text as **character** (chr) strings. They are sequences of character data, usually used to store qualitative data.\n\nStrings are contained within either 'single' or \"double\" quotation marks.\n\nAll characters between the opening and the closing quote are part of the string.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example of a character string\n\n\"Hello World\"\n```\n:::\n\n\n\n\nThe choice between single and double quotes is up to the user, as long as you start and end with the same symbol.\n\n### **A note on quotes** {.unnumbered}\n\nWhat you must be careful of however, is utilising apostrophes or quotes within a sentence.\n\nIf you must do this, you use one quotation mark to open and close the string and the **other** to type the quote.\n\nThe following code is incorrect:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Incorrect character string\n\n\"You should be proud of when you typed \"Hello World\" and ran that code!\"\n```\n:::\n\n\n\n\nNotice that the syntax highlighting has told you that something is wrong, as the \"Hello World\" is outside of the string, since you used too many double quotes.\n\nHowever, if you switch to single quotes, this will work fine.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Correct character string\n\n\"You should be proud of when you typed 'Hello World' and ran that code!\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Correct character string\n\n'You should be proud of when you typed \"Hello World\" and ran that code!'\n```\n:::\n\n\n\n\nNotice that the outputs here are slightly different. This is because when inside a string, R needs to be sure that the character (such as a quote mark) is being used as raw text, as opposed to it's other function as a way to create strings.\n\nThis manifests itself as a **backslash \\\\** which is known as an escape character. It basically tells R to interpret the character that directly follows it as raw text.\n\n::: {.callout-tip}\nIf you forget to put quotes around something, you can highlight and press the quote key and it will add quotes to both sides.\n:::\n\n## Logical Data\n\nIn R these are written as \"TRUE\" or \"FALSE\" and cannot take any other form.\n\n::: {.callout-note}\nThey are special R data types - not characters!\n:::\n\n### Comparisons to produce logicals\n\nThese seem arbitrary at first, but are **essential** for comparison purposes, and are created under the hood many times when performing data manipulations such as filtering.\n\nThe logical operators that can output them as an answer to a question are as follows:\n\n| Logical Operator |       Description        |\n|:----------------:|:------------------------:|\n|        \\<        |        Less Than         |\n|       \\<=        |  Less Than or Equal To   |\n|        \\>        |       Greater Than       |\n|       \\>=        | Greater Than or Equal To |\n|        ==        |         Equal To         |\n|        !=        |       Not Equal To       |\n|       %in%       |        Membership        |\n|        \\|        |            Or            |\n|        &         |           And            |\n\n### **Examples** {.unnumbered}\n\nIs 4 greater than 5?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Greater than comparison\n\n4 > 5\n```\n:::\n\n\n\n\nIs 25 equivalent to 5 squared?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check equivalence comparison\n\n25 == 5^2\n```\n:::\n\n\n\n\nIs 1 not equivalent to 2?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check non-equivalence comparison\n\n1 != 2\n```\n:::\n\n\n\n\n### Numeric representation of logicals\n\nSince logicals are binary operators (they are one or the other, nothing else), they also have binary numeric values behind them:\n\n-   TRUE is represented as 1\n-   FALSE is represented as 0.\n\nTherefore, you can convert them to numbers and even perform arithmetic operations on them!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prove that TRUE has a numeric representation\n\nTRUE + TRUE\n```\n:::\n\n\n\n\nAnd use any other operator too!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prove that FALSE has a numeric representation\nFALSE * 2.5\n```\n:::\n\n\n\n\nThese are quite a complex datatype and there is much more beyond the scope of the course in this topic.\n\n### **Checking Datatypes** {.unnumbered}\n\nyou can see the respective type of any data by using the **typeof()** function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Output datatypes of specific numeric inputs\n\ntypeof(10)\n\ntypeof(10L)\n```\n:::\n\n\n\n\n## Functions\n\nR has a range of built-in functions for common operations.\n\n:::{.callout-note}\nFunctions are commands that take an input, do something to it, and produce an output. These are essential to R programming and will be covered in detail later.\n:::\n\nFunctions in R are written as:\n\n-   A word (the name given to the function by its creator), which is **fixed**.\n-   Brackets, inside which you type the inputs (data types or structures you wish to pass into the function).\n\nFor example:\n\n-   The square root function is written as **sqrt(inputs)**\n-   The rounding function is written as **round(inputs)**\n\nLet's see these in action.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculating the square root of 9 using functions.\n\nsqrt(9)\n\n\n# Rounding a value using functions. \n\nround(3.6357)\n```\n:::\n\n\n\n\nThe inputs you give to the function are called **values** and have labels/names, known as the **argument**, which are fixed by the creator of the function.\n\nIn general this is written as:\n\n> **function(argument = value,..)**\n\n### **Arguments**\n\nNotice that above you didn't give the argument, you just gave the value. This is acceptable in this case as sqrt() and round() are quite simple functions.\n\nHowever, functions such as round() can take more than one argument, many are optional and some have a default value that can be turned off and tweaked.\n\n> A common example is when rounding, you would likely want to specify the number of decimal places to round to. This can be controlled with the optional **digits** argument.\n\nyou separate arguments within functions using commas, as follows:\n\n> **func(argument_1 = value_1, argument_2 = value_2,...)**\n\nLet's see an example of using multiple arguments with the round() function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Round to 2 decimal places\n\nround(3.6357, digits = 2) \n```\n:::\n\n\n\n\nYou **must** make sure that the argument name is correct (as defined by the function itself), otherwise you will get an error.\n\n:::{.callout-note}\nNotice that even without the digits argument, the round() function works. This is because digits (like many arguments) is optional, and has a value of 0 by default, rounding to the nearest whole number.\n:::\n\n### **Function documentation**\n\nYou can investigate what specific functions do by navigating to the \"Help\" tab in the bottom right and searching it by name.\n\n![](Images/round_docstring.png){fig-alt=\"The document string of the rounding functions in R.\"}\n\nyou see:\n\n-   The description of the function of family of functions (group of functions that perform similar actions).\n\n-   Examples of its use under \"Usage\".\n\n-   Descriptions of its arguments and what they expect as their values under \"Arguments\".\n\nand some other niche notes for more advanced R users.\n\n## Exercise\n\n::: panel-tabset\n### **Exercise**\n\nWhat is the data type of the following?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Guess the datatypes\n\n\"10\"\n\n10L\n\n10\n\nTRUE\n\n\"ten\"\n\n\"TRUE\"\n\nFALSE\n\n\"FALSE\"\n```\n:::\n\n\n\n\n### **Show Answer**\n\nThe \"typeof()\" output denotes the (R internal) type or storage mode of any object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find out the datatypes\n\ntypeof(\"10\")\n\ntypeof(10L)\n\ntypeof(10)\n\ntypeof(TRUE)\n\ntypeof(\"ten\")\n\ntypeof(\"TRUE\")\n\ntypeof(FALSE)\n\ntypeof(\"FALSE\")\n```\n:::\n\n\n\n\nWere there any that surprised you?\n:::\n\n## Data Type Conversion\n\nNow that you know some of the data types you will look at how to convert between them.\n\nR doesn't require you to set the data type when you create it, instead it figures out what the best data type is for the object you are creating - numeric, character, logical, etc.\n\nGiven that R is a dynamically typed language, sometimes the inference it makes about data types are not correct and must be altered.\n\n### The as.type() family\n\nIn order to convert the data, you need to use the **as.type()** family of functions, some examples being:\n\n-   **as.numeric()** to convert to Double.\n\n-   **as.character()** to convert to Characters.\n\n-   **as.logical()** to convert to Logical.\n\nLet's see some in action. What do you notice in the output?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examples of type conversion\n\nas.integer(4.996453)\n\nas.numeric(\"2\")\n\nas.character(245)\n```\n:::\n\n\n\n\nA summary:\n\n-   as.integer() did no rounding, it just removed everything after the decimal place and left the integer component.\n\n-   as.numeric() converted the string \"2\" to a double.\n\n-   as.charater() placed quotation marks around 245 to make it a character string.\n\nYou can check the types of these conversions by wrapping them up in a typeof() function. Nesting functions like this is commonplace in R and many other programming languages.\n\nBrackets can get unruly when doing this, the rainbow colours you setup earlier will help distinguish which bracket belongs to which function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the type of converted data\n\ntypeof(as.integer(4.996453)) \n```\n:::\n\n\n\n\n# Variable Assignment\n\nVariables are an integral part of any programming language.\n\nThey allow you to store and label data under a specific name, acting as a place holder. Think of it as a container, the main purpose is to label and store the data in memory.\n\n## Creating and Returning a Variable\n\nYou can assign a value to a variable using the **\\<-** operator.\n\n:::{.callout-tip}\nThe keyboard shortcut for this is ALT - (alt + dash/minus).\n:::\n\nAn example is below:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To assign a variable\n\nweight_kg <- 60\n```\n:::\n\n\n\n\nThe variable name goes on the left, followed by the assignment operator, then lastly the value that name is assigned to.\n\nOnce an object has been created it will appear in your Environment pane which helps you keep track of what objects you have in your current workspace - the top right pane.\n\nLiterally typing the name of the variable and running the code returns the value assigned to it.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To display the variable\n\nweight_kg\n```\n:::\n\n\n\n\n### **Concatenation**\n\nIf you wanted to display the weight a bit better, you could use the \"cat()\" function (concatenate).\n\nThis can take data, raw character strings and variables as inputs, grouping them together in a sentence/sequence of outputs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the cat() function to display your result\n\ncat('my weight is: ', weight_kg)\n```\n:::\n\n\n\n\nYou could continue this with other variables created as well. Let's add your age.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating an age variable and improving the sentence\n\nage_yrs <- 27\n\ncat(\"My weight is\", weight_kg, \"kg, and I am\", age_yrs, \"years old.\")\n```\n:::\n\n\n\n\n### **Mathematical Operations on Variables**\n\nYou can apply addition, subtraction and other operations to your variables. It is the value assigned to the variable that determines the datatype.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prove that the value is what determines the datatype\n\ntypeof(weight_kg)\n```\n:::\n\n\n\n\nNow let's do some maths.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add 4 to your weight\n\nweight_kg + 4\n```\n:::\n\n\n\n\n### **Creating new variables from existing**\n\nYou can modify the value of a variable in some way and then assign that to a new variable.\n\nFor example, let's convert weight from kg to lbs, where 1kg = 2.2lbs\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a new variable, converting the existing one\n\nweight_lb <- weight_kg * 2.2\n\n# To display the variable\n\nweight_lb\n```\n:::\n\n\n\n\n### **Overwrite and reassign an existing variable**\n\nIf you want to reassign a variable you could use the assignment operator again.\n\nLet's assign your height as 5.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create height variable\n\nheight <- 5\n\n\n# Display height\n\nheight\n```\n:::\n\n\n\n\nUsing the same variable name will overwrite the previously assigned variable, even if you assign it to the same value.\n\nLet's overwrite height to a different value.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign and overwrite height\n\nheight <- 7\n\n# Display new height\n\nheight\n```\n:::\n\n\n\n\nYou can also assign variables using the **=** operator, but this is considered bad practice in R as it is used to give function arguments a value.\n\n## Removing Variables\n\nTo remove a variable, use the **remove()** function of R or the alias **rm()**.\n\nFor example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Removing assigned variables using the remove function\n\nremove(height)\n\n# rm(height) will also work\n```\n:::\n\n\n\n\nBe careful with this, R will not warn you that you are about to permanently remove a variable, it will perform the action you asked it to.\n\nShould you do this by mistake, you need to re-run the line where the variable was created.\n\n## Variable Names\n\nNaming variables is another skill important to programming. Some points to consider:\n\n-   R is case sensitive, so whatever you name your variables has be typed **exactly** to display them.\n-   Names must start with a letter.\n-   Names cannot contain spaces, this is an error in syntax.\n-   Names cannot use reserved words such as \"TRUE\" or \"FALSE\" or the name of a function like \"sqrt()\", which already mean something in R.\n-   Names should be descriptive, so that when someone else is reading your code they don't have to guess what data is held within a variable.\n\nNotice above where you wrote \"weight_kg\", it is a weight value in kg.\n\n### **Cases**\n\nThere are several conventions for construction variable and function names:\n\n**snake_case**\n\n-   Names are entirely lower case.\n-   Names separate words with underscores \\*\\*\\_\\*\\*.\n\n**camel case**\n\n-   Names start with a capital letter and each word is separated by them, such as **WeightKg**\n\n**period case**\n\n-   Names are separated with full stops, such as **weight.kg**.\n\nSnake case is used often and leads to clear, informative variable names without too much complexity.\n\nThere is more detailed information on good variables names in your other course: [Best Practice in Programming](https://learninghub.ons.gov.uk/course/view.php?id=497)\n\n## Exercise\n\n::: panel-tabset\n### **Exercise**\n\n1.  Why does this code not work?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign my_variable\n\nmy_variable <- 10\n\n\n# Not working\n\nmy_varIable\n```\n:::\n\n\n\n\n2.  Create two variables:\n\n-   Time at a value of 30 seconds.\n-   Distance at a value of 10 metres.\n\nThen:\n\n-   Double the time variable and overwrite it.\n-   Add 5 to the distance variable and overwrite it.\n\n3.  Using the variables you created above, compute the speed using the formula:\n\n-   **speed = distance / time**\n\n4.  Use the remove() and rm() functions to remove the time and distance variables.\n\n### **Show Answer**\n\n1.  You would have got the error below:\n\n:::{.callout-important}\nError: object 'my_varIable' not found\n:::\n\nVariables are case sensitive, so when you called the variable with a capital \"I\", it tried to recall a name that didn't exist.\n\nError messages of the form \"object '...' not found\" tell you that R cannot find an object, in this case variable, with that name.\n\n2.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create time\n\ntime_secs <- 30\n\n# Create distance\n\ndistance_metres <- 10\n\n# Overwrite time\n\ntime_secs <- 30 * 2\n\n# Overwrite distance\n\ndistance_metres <- distance_metres + 5\n```\n:::\n\n\n\n\n3.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create speed using the formula\n\nspeed <- distance_metres / time_secs\n\n# Display speed\n\nspeed\n```\n:::\n\n\n\n\n4.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove time\n\nremove(time_secs)\n\nrm(distance_metres)\n```\n:::\n\n\n\n:::\n\n# Help\n\nThere is a wealth of resource to help you progress in your R journey. Some of these are explored below.\n\n## Cheat Sheets\n\nYou can access these by clicking on **Help** tab in R Studio and then **RStudio Cheat Sheets**. They provide an excellent reference point for many common tasks.\n\n![](Images/data-transformation-cheat-sheet.png){fig-alt=\"The dplyr cheat sheet for data manipulation.\"}\n\n## R Documentation\n\n::: panel-tabset\n### **Example** {.unnumbered}\n\nWhen you use a function for a first time or come back to it at a later date , it can be helpful to look through its documentation.\n\nYou can use code to access help documentation:\n\n-   Precede the function name with a question mark **?**.\n\n-   You can use the **help()** function built into R and the name of the function inside it.\n\nLet's see an example with the mean() function, that computes the mean of a collection of values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To access the R help documentation\n\n?mean \n\n#or \n\nhelp(mean) # Note that you didn't need to use () on the function name\n```\n:::\n\n\n\n\nYou could also use Google to search for the same documentation online, with the accessibility benefits offered by html.\n\nBecoming adept at searching for answers to your queries and using coding elements is a skill that many programmers build up over time. You don't need to memorise every piece of syntax.\n\n### **Help Pages** {.unnumbered}\n\nEach help page is divided into sections.\n\nWhich sections appear can vary from help page to help page, but you can usually expect to find these useful headings:\n\n**Description** - A short summary of what the function does.\n\n**Usage** - An example of how you would type the function. Each argument of the function will appear in the order R expects you to supply it (if you don't use argument names).\n\n**Arguments** - A list of each argument the function takes and what to supply to it as a value. You will spend most of your time here, investigating what options are available.\n\n**Details** - A more in-depth description of the function and how it operates.\n\n**Value** - A description of what the function returns when you run it.\n\n**See Also** - A short list of related R functions.\n\n**Examples** - Example code that uses the function and is guaranteed to work. This helps give you an idea of what the function is capable of.\n:::\n\n## Stack Overflow\n\n[Stack Overflow](https://stackoverflow.com/questions/tagged/r) is a great site to check if anyone has experienced an error before.\n\nYou can search the R-tagged questions on the Stack Overflow site, of which there are over 501,000 as of January 2024.\n\nNote that to make the most use of the forum, you should provide:\n\n-   What you were attempting with the code you wrote\n-   The code you wrote\n-   Steps you took to try and solve it (your interpretation of what happened)\n\nThis allows other users to replicate your problem, so they can explain what to do or why the method causes issues.\n\n## The Data Science Campus Faculty Team\n\nIf you have any issues with this course; or notice any errors, please contact the training team on the email:\n\n> **Data.Science.Campus.Faculty\\@ons.gov.uk**\n\nPlease be aware that due to training commitments there may be a small wait before you respond to your query.\n\n# Summary\n\nYou have covered a lot material in R and yet there is still so much more to cover in terms of functionality, as R has so much to offer.\n\nBy no means are you expected to remember all the above, what is better is that you understand the problems you want to solve and then use the references or material provided to go about solving it.\n\nNext up you will look at data structures in R.\n",
    "supporting": [
      "CH1_getting_started_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}