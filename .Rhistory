chisq.test(titanic$survived, titanic$age_of_passenger)
chisq.test(titanic$survived, titanic$fare)
# question for almas
# is p value probability value???
cor.test(titanic$age_of_passenger, titanic$fare, method = "pearson")
cor.test(titanic$survived, titanic$age_of_passenger, method = "pearson")
#Regression model
my_first_model <- glm(survived ~ age_of_passenger + pclass + sex_of_passenger + sibsp + parch + fare + embarked + cabin,                     data = titanic, family = binomial(link = 'logit'))
summary(my_first_model)
t <- titanic %>%
filter(pclass == 1 & survived ==1)
t
t
t
count(t)
count(t)
titanic %>%
filter(pclass != 1 & survived ==1)
t2 <- titanic %>%
filter(pclass != 1 & survived ==1)
count(t2)
t4 <- titanic %>%
filter(pclass == 1)
count(t4)
t5 <- titanic %>%
filter(pclass != 1)
count(t5)
prop.test(x=c(200,300),n=c(323,986), alternative = "greater")
prop.test(x=c(200,300),n=c(323,986), alternative = "less")
prop.test(x=c(200,300),n=c(323,986), alternative = "two.sided")
ztest<-prop.test(x= c(200,300),n= c(1309,1309), alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= c(200,300),n= c(1309,1309), alternative='two.sided')
ztest
count(t)
p1 <- (200/323)
p2 <- (300/986)
p <- (500/1309)
ee <- (p1-p2)/sqrt(p(1-p)((1/323)+(1/986)))
p1 <- (200/323)
p2 <- (300/986)
p <- (500/1309)
ee <- (p1-p2)/sqrt(p(1-p)((1/323)+(1/986)))
ee <- (p1-p2)/sqrt(p*(1-p)*((1/323)+(1/986)))
ee
aaa <- titanic %>%
filter(pclass== 1 | pclass != 1) %>%
count(survived== 1) %>%
t()
print(aaa)
aaa <- titanic %>%
filter(pclass== 1 | pclass != 1) %>%
count(survived== 1)
print(aaa)
t <- titanic %>%
filter(pclass == 1 & survived ==1
mean(t)-
mean(t)
mean(t, na.rm = TRUE)
t <- titanic %>%
filter(pclass == 1 & survived ==1)
t
ww <- titanic %>%
filter(pclass==1)
mean(ww$survived==1,na.rm=TRUE)
firstclass <- titanic %>%
filter(pclass==1)
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1)
var(firstclass$survived==1)
var(firstclass$survived==1,na.rm=TRUE)
varince1 <- var(firstclass$survived==1)
varince2 <- var(secondclass$survived==1)
n1 <- count(firstclass$survived==1)
count(firstclass$survived==1,na.rm=TRUE)
n1 <- count(t)
n1
ztest<-prop.test(x= c(200,300),n= c(500,500), alternative='two.sided')
sqrt(ztest$statistic)
finally <-  (x1-x2)/sqrt((varince1/n1)+(varince2/n2))
firstclass <- titanic %>%
filter(pclass==1)
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1)
x2 <- mean(secondclass$survived==1,na.rm=TRUE)
varince1 <- var(firstclass$survived==1)
varince2 <- var(secondclass$survived==1)
n1 <- 200
n2 <- 300
finally <-  (x1-x2)/sqrt((varince1/n1)+(varince2/n2))
finally
finally <-  (x1-x2)/sqrt((varince1)+(varince2))
finally
firstclass$survived==1
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
finally <-  (x1-x2)/sqrt((varince1/n1)+(varince2/n2))
finally
firstclass <- titanic %>%
filter(pclass==1)
count(firstclass)
count(firstclass$survived==0)
count(firstclass$survived==1)
firstclass <- titanic %>%
filter(pclass==1 & survived == 1)
count(firstclass)
firstclass <- titanic %>%
filter(pclass==1)
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1)
x2 <- mean(secondclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1) %>%
filter(survived==1)
count(secondclass)
secondclass <- titanic %>%
filter(pclass!=1)
firstclass <- titanic %>%
filter(pclass==1)
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1)
x2 <- mean(secondclass$survived==1,na.rm=TRUE)
varince1 <- var(firstclass$survived==1)
varince2 <- var(secondclass$survived==1)
n1 <- 200
n2 <- 300
finally <-  (x1-x2)/sqrt((varince1/n1)+(varince2/n2))
finally
titanic %>%
filter(survived==1)
hehe <- titanic %>%
filter(survived==1)
count(hehe)
ztest<-prop.test(x= c(200,300),n= c(500,500), alternative='two.sided')
sqrt(ztest$statistic)
count(firstclass)
ztest<-prop.test(x= c(200,300),n= c(1309,1309), alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= c(200,300),n= c(323,986), alternative='two.sided')
sqrt(ztest$statistic)
firstclass1 <- titanic %>%
filter(survived==1)
x1 <- mean(firstclass1$pclass==1,na.rm=TRUE)
x1
x2 <- mean(firstclass1$pclass != 1,na.rm=TRUE)
varince1 <- var(firstclass1$pclass==1)
varince2 <- var(firstclass1$pclass!=1)
firstclass3 <- titanic %>%
filter(survived==1)
filter(pclass==1)
firstclass3 <- titanic %>%
filter(survived==1) %>%
filter(pclass==1)
count(firstclass3)
n1 <- 200
n2 <- 300
finally <-  (x1-x2)/sqrt((varince1/n1)+(varince2/n2))
finally
x1 <- mean(firstclass1$pclass==1,na.rm=TRUE)
x1
x2
varince1
varince2
varince2 <- var(firstclass1$pclass!=1)
varince2
varince11 <- var(firstclass1$pclass==1)
varince22 <- var(firstclass1$pclass!=1)
varince11
varince22
finally <-  (x2-x1)/sqrt((varince11/n1)+(varince22/n2))
finally
ztest<-prop.test(x= c(200,300),n= c(323,986), alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= c(200,300),n= c(500,500), alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= c(200,300),n= c(1309,1309), alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= c(200,300),n= c(323,986), alternative='two.sided')
sqrt(ztest$statistic)
finally <-  (x1-x2)/sqrt((varince11/n1)+(varince22/n2))
finally
hehe <- titanic %>%
filter(survived==1)
count(hehe)
ztest<-prop.test(x= 323 ,n=1309, alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= 323 ,n=986, alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= 200 ,n=986, alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= 200 ,n=300, alternative='two.sided')
sqrt(ztest$statistic)
z_test <- function(my_sample, my_pop, observation){
mean_of_sample <- mean(my_sample, na.rm = TRUE)
mean_of_population <- mean(my_pop, na.rm = TRUE)
number_of_obeservation <- nrow(observation)
my_z_test <- (mean_of_sample - mean_of_population)/
(sd(my_pop)/sqrt(number_of_obeservation))
return(my_z_test)
}
first_class_passengers <- titanic %>%
filter(pclass == 1)
z_test(my_sample = first_class_passengers$survived,
my_pop = titanic$survived,
observation = titanic$survived)
firstclass <- titanic %>%
filter(pclass==1)
x1 <- mean(firstclass$survived==1,na.rm=TRUE)
secondclass <- titanic %>%
filter(pclass!=1)
x2 <- mean(secondclass$survived==1,na.rm=TRUE)
ztest<-prop.test(x= 200 ,n=300, alternative='two.sided')
sqrt(ztest$statistic)
t <- titanic %>%
filter(pclass == 1 & survived ==1)
t
count(t)
t2 <- titanic %>%
filter(pclass != 1 & survived ==1)
t2
count(t2)
t4 <- titanic %>%
filter(pclass == 1)
count(t4)
ztest<-prop.test(x= 200 ,n=323, alternative='two.sided')
sqrt(ztest$statistic)
ztest<-prop.test(x= 200 ,n=1309, alternative='two.sided')
sqrt(ztest$statistic)
count(titanic)
count(titanic$survived)
count(titanic$survived==1)
getwd()
setwd("D:")
getwd()
setwd("D: /Gitarea/Intro_to_R_Refresh")
setwd("D: /Gitarea/Intro_to_R_Refresh/")
setwd("D:/Gitarea/Intro_to_R_Refresh")
getwd()
library(openxlsx)
read(readxl)
library(readxl)
?read_xls
test <- read_excel("https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls")
test <- read_excel(https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls)
?read_excel
library(gdata)
install.packages("gdata")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(openxlsx)
library(httr)
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
excel_sheets()
excel_sheets(cpi_excel)
cpi_excel
read_excel(cpi_excel)
?map
cpi_excel
?read_xlsx("https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls")
test <- read_xlsx("https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls")
test <- read.xlsx("https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls")
test <- read.xls("https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls")
excel_sheets(cpi_excel)
# This part of the code will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
cpi_table13
cpi_table15
cpi_table15[1,]
cpi_table15[12]
cpi_table15[1,]
cpi_table15[2,]
cpi_table15[3,]
cpi_table15[1,]
# This part of the code will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
# `excel_sheets()` will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
?GET
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")), )
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
cpi_table13
head(cpi_table13)
# Note the blank lines at the top of the table. The actual data table does not "start" until row 6, which contains the actual column names.
head(cpi_table13)
# Note that column names in the R object have just been inferred, and are not very useful:
names(cpi_table13)
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text.
cpi_table13[,3]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 3:
cpi_table13[1:10,3]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 3:
cpi_table13[1:20,3]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 3:
as.vector(cpi_table13[1:20,3])
as.vector(cpi_table13[1:20,3])
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 3:
as.vector(cpi_table13[1:20,4])
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 3:
cpi_table13[1:20,4]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 4:
cpi_table13[,4]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 4:
cpi_table13[1:5,4]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 4:
cpi_table13[1:7,4]
# You can have a look at individual columns to see that while these really should all be numbers, because of the layout of the Excel file, some contain words, which means the data gets interpreted as text. The following prints out the first ten (1:10) values of column 4:
cpi_table13[1:10,4]
# Using str() allows you to see which columns have been interpreted as what kind of value:
str(cpi_table13)
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13", skip = 6)
head(cpi_table13)
str(cpi_table13)
names(cpi_table13)
test <- readxl::read_excel(cpi_excel, sheet = "18a, 18b", range = "B6:O24")
test
?read_excel
test <- readxl::read_excel(cpi_excel, sheet = "Table 13", range = "D6:Q24")
test
test <- readxl::read_excel(cpi_excel, sheet = "Table 13", range = "D6:Q7")
test
t(test)
test <- readxl::read_excel(cpi_excel, sheet = "Table 13", range = "D6:Q7", col_names = FALSE)
test
t(test)
test[,1]
test[1,]
paste(test[2,], test[1,]
)
library(curl)
sessionInfo()
test <- readxl::read_excel(cpi_excel, sheet = "Table 13", range = "D6:Q7")
test
cpi_excel
cpi_table18a
htmltools::img(src = knitr::image_uri("./Images/LATree.PNG"),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px; width:200px;')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(openxlsx)
library(httr)
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
get_msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
# `excel_sheets()` will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
# Note the blank lines at the top of the table. The actual data table does not
# "start" until row 6, which contains the actual column names.
head(cpi_table13)
# Note that column names in the R object have just been inferred, and are not
# very useful:
names(cpi_table13)
# You can have a look at individual columns to see that while these really
# should all be numbers, because of the layout of the Excel file, some contain
# words, which means the data gets interpreted as text. The following prints out
# the first ten (1:10) values of column 4:
cpi_table13[1:10,4]
# Using str() allows you to see which columns have been interpreted as what kind
# of value. Note all columns have been interpreted as character strings (chr):
str(cpi_table13)
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13", skip = 6)
head(cpi_table13)
str(cpi_table13)
names(cpi_table13)
cpi_table18a <- readxl::read_excel(cpi_excel, sheet = "18a, 18b", range = "B6:O24")
cpi_table18b <- readxl::read_excel(cpi_excel, sheet = "18a, 18b", range = "B30:O47")
head(cpi_table18a)
head(cpi_table18b)
str(cpi_table18a)
str(cpi_table18b)
# There are several ways you could have got the sheets you needed.
# 1. Reading the specific sheet using the `sheet =` arguments in `readxl::read_excel`
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
# 2. Finding the correct dataframe in your list of dataframes made earlier
cpi_table13 <- cpi_df[14]
cpi_table18a
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(openxlsx)
library(httr)
htmltools::img(src = knitr::image_uri("./Images/LATree.PNG"),
alt = 'logo',
style = 'position:absolute; top:0; right:0; padding:10px; width:200px;')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(openxlsx)
library(httr)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(openxlsx)
library(httr)
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
get_msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
cpi_excel <- "C:/Downloads/myfile.xls"
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
get_msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
cpi_excel <- "C:/Downloads/myfile.xls"
# `excel_sheets()` will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
# Note the blank lines at the top of the table. The actual data table does not
# "start" until row 6, which contains the actual column names.
head(cpi_table13)
cpi_excel_url <- 'https://www.ons.gov.uk/file?uri=/economy/inflationandpriceindices/datasets/consumerpriceinflation/current/consumerpriceinflationdetailedreferencetables.xls'
get_msg <- httr::GET(cpi_excel_url, write_disk(cpi_excel <- tempfile(fileext = ".xls")))
# `excel_sheets()` will tell us what the names of the sheets are
readxl::excel_sheets(cpi_excel)
# Here we use the "sheet=" argument to read specific sheets:
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13")
cpi_table15 <- readxl::read_excel(cpi_excel, sheet = "Table 15")
# Note the blank lines at the top of the table. The actual data table does not
# "start" until row 6, which contains the actual column names.
head(cpi_table13)
# Note that column names in the R object have just been inferred, and are not
# very useful:
names(cpi_table13)
# You can have a look at individual columns to see that while these really
# should all be numbers, because of the layout of the Excel file, some contain
# words, which means the data gets interpreted as text. The following prints out
# the first ten (1:10) values of column 4:
cpi_table13[1:10,4]
# Using str() allows you to see which columns have been interpreted as what kind
# of value. Note all columns have been interpreted as character strings (chr):
str(cpi_table13)
cpi_table13 <- readxl::read_excel(cpi_excel, sheet = "Table 13", skip = 6)
head(cpi_table13)
str(cpi_table13)
names(cpi_table13)
cpi_table13
names(cpi_table13)
str(cpi_table13)
cpi_table13[,1]
cpi_table13[,2]
cpi_table13[,3]
cpi_table13[1:10,3]
head(cpi_table13)
as.data.frame(cpi_table13)
head(as.data.frame(cpi_table13))
cpi_table13_headers <- readxl::read_excel(cpi_excel, sheet = "Table 13", range = "D6:Q24")
cpi_table13_headers <- readxl::read_excel(cpi_excel,
sheet = "Table 13",
range = "D6:Q24",
col_names = FALSE
)
cpi_table13_headers
cpi_table13_headers <- readxl::read_excel(cpi_excel,
sheet = "Table 13",
range = "D6:Q7",
col_names = FALSE
)
cpi_table13_headers
col_months <- cpi_table13_headers[2,]
col_years <- cpi_table13_headers[1,]
col_months
col_years
new_col_names <_ paste(col_months, col_years)
new_col_names <- paste(col_months, col_years)
new_col_names
cpi_table13_headers <- readxl::read_excel(cpi_excel,
sheet = "Table 13",
range = "D6:Q7",
col_names = FALSE,
na = " "
)
cpi_table13_headers
new_col_names <- paste(col_months, col_years)
new_col_names
new_col_names <- c("code","category",new_col_names)
new_col_names
names(cpi_table13) <- new_col_names
head(cpi_table13)
?GET
httr_options()
# Write a new excel file with two sheets
openxlsx::write.xlsx(cpi_table13, './Data/my_table_13.xlsx')
# Write a new excel file with two sheets
openxlsx::write.xlsx(cpi_table13, '../Data/my_table_13.xlsx')
# Write a new excel file with two sheets
dataset_names <- list('Sheet1' = cpi_table18a, 'Sheet2' = cpi_table18b)
cpi_table18a <- readxl::read_excel(cpi_excel, sheet = "18a, 18b", range = "B6:O24")
cpi_table18b <- readxl::read_excel(cpi_excel, sheet = "18a, 18b", range = "B30:O47")
head(cpi_table18a)
head(cpi_table18b)
str(cpi_table18a)
str(cpi_table18b)
# Write a new excel file with two sheets
dataset_names <- list('Sheet1' = cpi_table18a, 'Sheet2' = cpi_table18b)
openxlsx::write.xlsx(dataset_names, '../Data/my_tables18.xlsx')
